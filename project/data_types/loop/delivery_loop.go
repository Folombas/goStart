package loop

import (
	"fmt"
	"unicode/utf8"
)

func DeliveryLoop() {
	// 1. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ —É—Å–ª–æ–≤–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–≥—è –∫—É—Ä—å–µ—Ä–∞)
	fmt.Println("=== –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ===")
	deliveryCount := 1
	for {
		fmt.Printf("–î–æ—Å—Ç–∞–≤–∫–∞ #%d –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n", deliveryCount)
		deliveryCount++

		// –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞: –∫—É—Ä—å–µ—Ä —É—Å—Ç–∞–ª –ø–æ—Å–ª–µ 5 –¥–æ—Å—Ç–∞–≤–æ–∫
		if deliveryCount > 5 {
			fmt.Println("‚è∞ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω! –ö—É—Ä—å–µ—Ä —É—Å—Ç–∞–ª.\n")
			break
		}
	}

	// 2. –¶–∏–∫–ª —Å –æ–¥–∏–Ω–æ—á–µ—ã–º —É—Å–ª–æ–≤–∏–µ–º (while-–ø–æ–¥–æ–±–Ω—ã–π)
	fmt.Println("=== –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ===")
	orderAvailable := false
	attempts := 0
	for !orderAvailable {
		attempts++
		fmt.Printf("–ü–æ–ø—ã—Ç–∫–∞ #%d: –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...\n", attempts)

		// –≠–º—É–ª—è—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ 3-–π –ø–æ–ø—ã—Ç–∫–µ
		if attempts >= 3 {
			orderAvailable = true
			fmt.Println("üéâ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑! –ê–¥—Ä–µ—Å: –•–∏–º–∫–∏, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 15\n")
		}
	}

	// 3. –¶–∏–∫–ª —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —É—Å–ª–æ–≤–∏–µ–º (—É–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for)
	fmt.Println("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ ===")
	fmt.Println("–ö—É—Ä—å–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –≤ —Å—É–º–∫–µ:")
	for i := 1; i <= 4; i++ {
		fmt.Println("–ó–∞–∫–∞–∑ #%d: –ü—Ä–æ–≤–µ—Ä–µ–Ω, —É–ø–∞–∫–æ–≤–∞–Ω, –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ\n", i)
	}
	fmt.Println(""‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!\n"")

	// 4. –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ slice (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
	fmt.Println("=== –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±) ===")
	addresses := []string{
		"—É–ª. –õ–µ–Ω–∏–Ω–∞, 10",
		"–ø—Ä-—Ç –ú–∏—Ä–∞, 25",
		"—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 15",
		"–±-—Ä –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤, 7",
	}

	fmt.Println("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:")
	for i := 0; i < len(addresses); i++ {
		fmt.Printf("%d. %s\n", i+1, addresses[i])
	}
	fmt.Println()

	// 5. –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ slice —Å range (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
	fmt.Println("=== –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (range –¥–ª—è slice) ===")
	packages := []struct {
		ID        int
		Address   string
		Weight    float64
	}{
		{101, "—É–ª. –°–∞–¥–æ–≤–∞—è, 42", 2.5},
		{202, "–ø—Ä-—Ç –ü–æ–±–µ–¥—ã, 17", 1.8},
		{303, "—É–ª. –õ–µ—Å–Ω–∞—è, 5", 3.2},
	}

	fmt.Println("–ù–∞—á–∞–ª–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")
	for idx, pkg := range packages {
		fmt.Printf("–î–æ—Å—Ç–∞–≤–∫–∞ #%d: –ó–∞–∫–∞–∑ %d (%.1f –∫–≥) -> %s\n",
			idx+1, pkg.ID, pkg.Weight, pkg.Address)
	}
	fmt.Println(""‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!\n"")

	// 6. –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ map —Å range (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
	fmt.Println("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è (range –¥–ª—è map) ===")
	deliveryStats := map[string]int{
		"–£—Å–ø–µ—à–Ω–æ":  8,
		"–û—Ç–º–µ–Ω–µ–Ω–æ": 2,
		"–í–æ–∑–≤—Ä–∞—Ç":  1,
		"–û–ø–æ–∑–¥–∞–Ω–∏–π": 1,
	}

	total := 0
	for status, count := range deliveryStats {
		fmt.Printf("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: %d\n\n", total)
	}

	// 7. –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–µ —Å range
	fmt.Println("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ (range –¥–ª—è —Å—Ç—Ä–æ–∫–∏) ===")
	address := "—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 27–∫2"

	// 7.1 –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –±–∞–π—Ç–∞–º
	fmt.Println("–ê–¥—Ä–µ—Å –∫–∞–∫ –±–∞–π—Ç—ã:", []byte(address))
	fmt.Print("–°–∏–º–≤–æ–ª—ã (–ø–æ –±–∞–π—Ç–∞–º): ")
	for i := 0; i < len(address); i++ {
		fmt.Printf("%c ", address[i])
	}
	fmt.Println("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ —Å–∏–º–≤–æ–ª '–∫' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

}

