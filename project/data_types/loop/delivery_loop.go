package loop

import (
	"fmt"
	"unicode/utf8"
)

func DeliveryLoop() {
	// 1. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ —É—Å–ª–æ–≤–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–≥—è –∫—É—Ä—å–µ—Ä–∞)
	fmt.Println("=== –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ===")
	deliveryCount := 1
	for {
		fmt.Printf("–î–æ—Å—Ç–∞–≤–∫–∞ #%d –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n", deliveryCount)
		deliveryCount++

		// –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞: –∫—É—Ä—å–µ—Ä —É—Å—Ç–∞–ª –ø–æ—Å–ª–µ 5 –¥–æ—Å—Ç–∞–≤–æ–∫
		if deliveryCount > 5 {
			fmt.Println("‚è∞ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω! –ö—É—Ä—å–µ—Ä —É—Å—Ç–∞–ª.\n")
			break
		}
	}

	// 2. –¶–∏–∫–ª —Å –æ–¥–∏–Ω–æ—á–µ—ã–º —É—Å–ª–æ–≤–∏–µ–º (while-–ø–æ–¥–æ–±–Ω—ã–π)
	fmt.Println("=== –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ===")
	orderAvailable := false
	attempts := 0
	for !orderAvailable {
		attempts++
		fmt.Printf("–ü–æ–ø—ã—Ç–∫–∞ #%d: –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...\n", attempts)

		// –≠–º—É–ª—è—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ 3-–π –ø–æ–ø—ã—Ç–∫–µ
		if attempts >= 3 {
			orderAvailable = true
			fmt.Println("üéâ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑! –ê–¥—Ä–µ—Å: –•–∏–º–∫–∏, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 15\n")
		}
	}

	// 3. –¶–∏–∫–ª —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —É—Å–ª–æ–≤–∏–µ–º (—É–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for)
	fmt.Println("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ ===")
	fmt.Println("–ö—É—Ä—å–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –≤ —Å—É–º–∫–µ:")
	for i := 1; i <= 4; i++ {
		fmt.Println("–ó–∞–∫–∞–∑ #%d: –ü—Ä–æ–≤–µ—Ä–µ–Ω, —É–ø–∞–∫–æ–≤–∞–Ω, –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ\n", i)
	}
	fmt.Println(""‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!\n"")

	// 4. –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ slice (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)

}

