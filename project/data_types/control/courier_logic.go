package control

import (
	"fmt"
	"math/rand"
)

func CourierLogic(){

	// 1. –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ if –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã
	isRaining := rand.Float32() < 0.7 // 70% chance of rain
	fmt.Println("=== –ü–æ–≥–æ–¥–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä ===")
	if isRaining {
		fmt.Println("‚òîÔ∏è –ù—É–∂–µ–Ω –¥–æ–∂–¥–µ–≤–∏–∫! –°–µ–≥–æ–¥–Ω—è –º–æ–∫—Ä—ã–π –¥–µ–Ω—å")
	} else {
		fmt.Println("‚òÄÔ∏è –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–æ–∫!")
	}

	// 2. –£—Å–ª–æ–≤–∏–µ —Å –±–ª–æ–∫–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞
	fmt.Println("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ===")
	if weight := rand.Intn(15) + 1; weight > 10 {
		fmt.Printf("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢—è–∂–µ–ª—ã–π –≥—Ä—É–∑ (%d –∫–≥). –í–æ–∑—å–º–∏—Ç–µ —Ä—é–∫–∑–∞–∫\n", weight)
	} else if weight > 5 {
		fmt.Printf("üõí –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (%d –∫–≥). –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å—É–º–∫–∞ –ø–æ–¥–æ–π–¥–µ—Ç\n", weight)
	} else {
		fmt.Printf("üì¶ –õ–µ–≥–∫–∏–π –∑–∞–∫–∞–∑ (%d –∫–≥). –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ä—É—á–Ω—É—é\n", weight)
	}

	// 3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π if else - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º
	fmt.Println("\n=== –°–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ ===")
	clientAvailable := rand.Intn(100) > 30 // 70% chance available
	addressCorrect := rand.Intn(100) > 20 // 80% chance correct
	paymentReady := rand.Intn(100) > 10 // 90% chance ready

	if !addressCorrect && !clientAvailable {
		fmt.Println("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ê–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—ã–π –∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
	} else if !addressCorrect {
		fmt.Println("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")
	} else if !clientAvailable {
		fmt.Println("üìû –ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–≤–æ–Ω–∫–∏...")
	} else if !paymentReady {
		fmt.Println("üí≥ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞")
	} else {
		fmt.Println("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏!")
	}

	// 4. Switch –ø–æ 1 –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π - –¢–∏–ø–∞ –∑–∞–∫–∞–∑–∞
	fmt.Println("\n=== –¢–∏–ø–∞ –∑–∞–∫–∞–∑–∞ ===")
	orderTypes := []string{"–µ–¥–∞", "–∞–ø—Ç–µ–∫–∞", "—Ü–≤–µ—Ç—ã", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"}
	orderType := orderTypes[rand.Intn(len(orderTypes))]

	switch orderType {
	case "–µ–¥–∞":
		fmt.Println("üçî –ó–∞–∫–∞–∑: –ü–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ä–º–æ—Å—É–º–∫–∞!")
	case "–∞–ø—Ç–µ–∫–∞":
		fmt.Println("üíä –ó–∞–∫–∞–∑: –õ–µ–∫–∞—Ä—Å—Ç–≤–∞. –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞!")
	case "—Ü–≤–µ—Ç—ã":
		fmt.Println("üíê –ó–∞–∫–∞–∑: –ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤. –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å!")
	case "–¥–æ–∫—É–º–µ–Ω—Ç—ã":
		fmt.Println("üìÑ –ó–∞–∫–∞–∑: –í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è —É–ø–∞–∫–æ–≤–∫–∞!")
	case "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞":
		fmt.Println("üì± –ó–∞–∫–∞–∑: –ì–∞–¥–∂–µ—Ç—ã. –û—Å–æ–±–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å!")
	default:
		fmt.Println("üì¶ –ó–∞–∫–∞–∑: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞")
	}

	
}

